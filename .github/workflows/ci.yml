name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: todo_app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: go test -v -short ./...

    - name: Set up database schema and seed data
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: todo_app
        DB_USER: postgres
        DB_PASSWORD: postgres
      run: |
        # Wait for PostgreSQL to be fully ready
        for i in {1..30}; do
          if PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c '\q' 2>/dev/null; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
        
        # Run database setup
        ./scripts/setup-db.sh

    - name: Run integration tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: todo_app
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_SSL_MODE: disable
      run: go test -v ./internal/repository/postgres ./cmd/server

    - name: Build server
      run: go build ./cmd/server

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o admin-service-linux-amd64 ./cmd/server
        GOOS=darwin GOARCH=amd64 go build -o admin-service-darwin-amd64 ./cmd/server
        GOOS=windows GOARCH=amd64 go build -o admin-service-windows-amd64.exe ./cmd/server

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: admin-service-binaries
        path: |
          admin-service-*
        retention-days: 7